// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserType {
  ADMIN
  USER
  OUTRO
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique @db.VarChar(50)
  email      String     @unique @db.VarChar(200)
  passoword  String     @db.VarChar(100)
  role       UserType   @default(USER)
  isActive   Boolean    @default(true)
  Dispatch   Dispatch[]
  Product    Product[]
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt

  @@map("users")
}

model Company {
  id           Int       @id @default(autoincrement())
  register     String
  name         String
  isActive     Boolean   @default(true)
  address      String?
  number_phone String?
  Product      Product[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("companies")
}

model TypeProduct {
  id         Int        @id @default(autoincrement())
  name       String
  isActive   Boolean    @default(true)
  Quantity   Quantity[]
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  Dispatch   Dispatch[]
  Product    Product[]

  @@map("typesProducts")
}

model Quantity {
  id                 Int         @id @default(autoincrement())
  quantities         Int
  quantities_minimal Int?        @default(20)
  TypeProduct        TypeProduct @relation(fields: [typeProductId], references: [id])
  typeProductId      Int

  @@map("quantities")
}

model Exit {
  id         Int        @id @default(autoincrement())
  name       String
  Dispatch   Dispatch[]
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt

  @@map("exits")
}

// Saida de produtos da farm√°cia
model Dispatch {
  id            Int         @id @default(autoincrement())
  TypeProduct   TypeProduct @relation(fields: [typeProductId], references: [id])
  typeProductId Int
  User          User        @relation(fields: [userId], references: [id])
  userId        Int
  Exit          Exit        @relation(fields: [exitId], references: [id])
  exitId        Int
  quantity      Int
  data          String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("dispatches")
}

// Entrada
model Prohibited {
  id         Int       @id @default(autoincrement())
  name       String
  Product    Product[]
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt

  @@map("appetizer")
}

model Product {
  id      Int    @id @default(autoincrement())
  nfe     String
  expires String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  TypeProduct   TypeProduct @relation(fields: [typeProductId], references: [id])
  typeProductId Int
  Company       Company     @relation(fields: [companyId], references: [id])
  companyId     Int
  User          User        @relation(fields: [userId], references: [id])
  userId        Int
  Prohibited    Prohibited  @relation(fields: [prohibitedId], references: [id])
  prohibitedId  Int
  @@map("products")
}
